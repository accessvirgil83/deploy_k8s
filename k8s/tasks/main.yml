---
- name: Setup Kubernetes on Ubuntu
  hosts: k8s_servers
  become: yes
  vars:
    ingress_controller_url: "https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml"
  tasks:
    - name: Download kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'

    - name: Download kubelet
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubelet
        dest: /usr/local/bin/kubelet
        mode: '0755'

    - name: Download kubeadm
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubeadm
        dest: /usr/local/bin/kubeadm
        mode: '0755'

    - name: Create kubelet service file
      template:  # Используйте template вместо copy для обработки Jinja2
        src:  /root/connect/k8s/templates/kubelet.j2  # Путь к вашему шаблону
        dest: /etc/systemd/system/kubelet.service

    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install additional packages
      apt:
        name:
          - ethtool
          - socat
          - conntrack
        state: present

    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: yes



- name: Setup k8s_main_node on Ubuntu
  hosts: main_master
  become: yes
  vars:
    ingress_controller_url: "https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml"
  tasks:
    - name: Initialize Kubernetes
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --upload-certs
      become: true

    - name: Create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to kube config
      command: cp -i /etc/kubernetes/admin.conf {{ ansible_env.HOME }}/.kube/config
      args:
        creates: "{{ ansible_env.HOME }}/.kube/config"

    - name: Change ownership of kube config
      shell: "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
      args:
        executable: /bin/bash

      #Выполняем настройку и установку Flanel
    - name: Apply Flannel CNI
      command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      become: no

    - name: Determine system architecture
      shell: |
        ARCH=$(uname -m)
          case $ARCH in
            armv7*) ARCH="arm";;
            aarch64) ARCH="arm64";;
            x86_64) ARCH="amd64";;
          esac
        echo $ARCH
      register: arch_output

    - name: Create directory for CNI plugins
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Download CNI plugins
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.5.1/cni-plugins-linux-{{ arch_output.stdout }}-v1.5.1.tgz"
        dest: /tmp/cni-plugins.tgz

    - name: Extract CNI plugins
      unarchive:
        src: /tmp/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: yes


- name: Add k8s_masters on Ubuntu
  hosts: k8s_masters
  become: yes
  vars:
    master_ip: "{{ hostvars['server1'].ansible_host }}"  # Замените на IP-адрес вашего мастер-узла
  tasks:
    - name: Determine system architecture
      shell: |
        ARCH=$(uname -m)
          case $ARCH in
            armv7*) ARCH="arm";;
            aarch64) ARCH="arm64";;
            x86_64) ARCH="amd64";;
          esac
        echo $ARCH
      register: arch_output
      when: inventory_hostname != "server1"

    - name: Create directory for CNI plugins
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'
        when: inventory_hostname != "server1"

    - name: Join the Kubernetes cluster
      shell: "kubeadm join {{ master_ip }}:6443 --token {{ token_output.stdout }} --discovery-token-ca-cert-hash sha256:{{ hash_output.stdout }}"
      args:
        executable: /bin/bash
      when: inventory_hostname != "server1"
